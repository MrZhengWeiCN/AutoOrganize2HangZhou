<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.blogs.mapper.BlogArticleMapper">
  <resultMap id="BaseResultMap" type="edu.blogs.pojo.BlogArticle">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="userId" jdbcType="INTEGER" property="userid" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="readed" jdbcType="INTEGER" property="readed" />
    <result column="createDate" jdbcType="DATE" property="createdate" />
    <result column="category" jdbcType="VARCHAR" property="category" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="image" jdbcType="VARCHAR" property="image" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="edu.blogs.pojo.BlogArticleWithBLOBs">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
    <result column="introduction" jdbcType="LONGVARCHAR" property="introduction" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, userId, title, readed, createDate, category, status, image
  </sql>
  <sql id="Blob_Column_List">
    content, introduction
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="edu.blogs.pojo.BlogArticleExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog_article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="edu.blogs.pojo.BlogArticleExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from blog_article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog_article
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from blog_article
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="edu.blogs.pojo.BlogArticleExample">
    delete from blog_article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="edu.blogs.pojo.BlogArticleWithBLOBs">
    insert into blog_article (id, userId, title, 
      readed, createDate, category, 
      status, image, content, 
      introduction)
    values (#{id,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, 
      #{readed,jdbcType=INTEGER}, #{createdate,jdbcType=DATE}, #{category,jdbcType=VARCHAR}, 
      #{status,jdbcType=TINYINT}, #{image,jdbcType=VARCHAR}, #{content,jdbcType=LONGVARCHAR}, 
      #{introduction,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="edu.blogs.pojo.BlogArticleWithBLOBs">
    insert into blog_article
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userid != null">
        userId,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="readed != null">
        readed,
      </if>
      <if test="createdate != null">
        createDate,
      </if>
      <if test="category != null">
        category,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="image != null">
        image,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="introduction != null">
        introduction,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userid != null">
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="readed != null">
        #{readed,jdbcType=INTEGER},
      </if>
      <if test="createdate != null">
        #{createdate,jdbcType=DATE},
      </if>
      <if test="category != null">
        #{category,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="image != null">
        #{image,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="introduction != null">
        #{introduction,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="edu.blogs.pojo.BlogArticleExample" resultType="java.lang.Integer">
    select count(*) from blog_article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update blog_article
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null">
        userId = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.title != null">
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.readed != null">
        readed = #{record.readed,jdbcType=INTEGER},
      </if>
      <if test="record.createdate != null">
        createDate = #{record.createdate,jdbcType=DATE},
      </if>
      <if test="record.category != null">
        category = #{record.category,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.image != null">
        image = #{record.image,jdbcType=VARCHAR},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.introduction != null">
        introduction = #{record.introduction,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update blog_article
    set id = #{record.id,jdbcType=INTEGER},
      userId = #{record.userid,jdbcType=INTEGER},
      title = #{record.title,jdbcType=VARCHAR},
      readed = #{record.readed,jdbcType=INTEGER},
      createDate = #{record.createdate,jdbcType=DATE},
      category = #{record.category,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=TINYINT},
      image = #{record.image,jdbcType=VARCHAR},
      content = #{record.content,jdbcType=LONGVARCHAR},
      introduction = #{record.introduction,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update blog_article
    set id = #{record.id,jdbcType=INTEGER},
      userId = #{record.userid,jdbcType=INTEGER},
      title = #{record.title,jdbcType=VARCHAR},
      readed = #{record.readed,jdbcType=INTEGER},
      createDate = #{record.createdate,jdbcType=DATE},
      category = #{record.category,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=TINYINT},
      image = #{record.image,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="edu.blogs.pojo.BlogArticleWithBLOBs">
    update blog_article
    <set>
      <if test="userid != null">
        userId = #{userid,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="readed != null">
        readed = #{readed,jdbcType=INTEGER},
      </if>
      <if test="createdate != null">
        createDate = #{createdate,jdbcType=DATE},
      </if>
      <if test="category != null">
        category = #{category,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="image != null">
        image = #{image,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="introduction != null">
        introduction = #{introduction,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="edu.blogs.pojo.BlogArticleWithBLOBs">
    update blog_article
    set userId = #{userid,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      readed = #{readed,jdbcType=INTEGER},
      createDate = #{createdate,jdbcType=DATE},
      category = #{category,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT},
      image = #{image,jdbcType=VARCHAR},
      content = #{content,jdbcType=LONGVARCHAR},
      introduction = #{introduction,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="edu.blogs.pojo.BlogArticle">
    update blog_article
    set userId = #{userid,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      readed = #{readed,jdbcType=INTEGER},
      createDate = #{createdate,jdbcType=DATE},
      category = #{category,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT},
      image = #{image,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>